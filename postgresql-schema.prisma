generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String         @id @default(uuid())
  name           String?
  email          String         @unique
  emailVerified  DateTime?
  hashedPassword String?
  image          String?
  role           String         @default("USER")
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  accounts       Account[]
  serverAccess   ServerAccess[]
  sessions       Session[]
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Server {
  id            String         @id @default(uuid())
  name          String
  ip            String
  country       String
  domain        String?
  username      String?
  password      String?
  privateKey    String?
  provider      String?
  apps          String?
  status        String         @default("UNKNOWN")
  lastChecked   DateTime?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  healthMetrics HealthMetric[]
  userAccess    ServerAccess[]
  speedTests    SpeedTest[]
}

model HealthMetric {
  id          String   @id @default(uuid())
  serverId    String
  cpuUsage    Float?
  memoryUsage Float?
  diskUsage   Float?
  uptime      Float?
  timestamp   DateTime @default(now())
  server      Server   @relation(fields: [serverId], references: [id], onDelete: Cascade)
}

model SpeedTest {
  id            String   @id @default(uuid())
  serverId      String
  downloadSpeed Float?
  uploadSpeed   Float?
  ping          Float?
  timestamp     DateTime @default(now())
  server        Server   @relation(fields: [serverId], references: [id], onDelete: Cascade)
}

model ServerAccess {
  id                String   @id @default(uuid())
  userId            String
  serverId          String
  canViewPassword   Boolean  @default(false)
  canViewPrivateKey Boolean  @default(false)
  canRunSpeedTest   Boolean  @default(true)
  canRunHealthCheck Boolean  @default(true)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  server            Server   @relation(fields: [serverId], references: [id], onDelete: Cascade)
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, serverId])
}